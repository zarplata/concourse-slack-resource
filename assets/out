#!/bin/bash

set -e -o pipefail

cd "${1}"

exec 3>&1
exec 1>&2

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > "${payload}" <&0

webhook_url="$(jq -r '(.source.url // "")' < "${payload}")"
allow_insecure="$(jq -r '.source.insecure // "false"' < "${payload}")"
raw_ca_certs=$(jq -r '.source.ca_certs // []' < $payload)

username="$(jq -r '(.params.username // null)' < "${payload}")"
icon_url="$(jq '(.params.icon_url // null)' < "${payload}")"
icon_emoji="$(jq '(.params.icon_emoji // null)' < "${payload}")"
channel="$(jq -r '(.params.channel // null)' < "${payload}")"
text="$(jq '(.params.text // "")' < "${payload}")"
attachments="$(jq -r '(.params.attachments // null)' < "${payload}")"

if [ -z ${webhook_url} ]; then
    echo "error: source.url can't be empty"
    exit 1
fi

function evaluate {
    echo ${1} | awk '{
		line = ""
		while (match($0, /\$\([^\)]+\)|\$\w+|\$\{\w+\}/)) {
			term = substr($0, RSTART, RLENGTH)
			line = line substr($0, 0, RSTART-1)
			$0 = substr($0, RSTART+RLENGTH)

			if (match(term, /\$\w+|\$\{\w+\}/)) {
				cmd = "jq -cn --arg cmd \"$(echo " term ")\" \"\\$cmd|tostring\""
			} else if (match(term, /\$\([^\)]+\)/)) {
				cmd = "jq -cn --arg cmd \"" term "\" \"\\$cmd|tostring\""
			} else {
				continue
			}

			cmd | getline output
			close(cmd)
			line = line substr(output, 2, length(output) - 2)
		}
		print line $0
    }'
}

[[ ${channel} != "null" ]] && channel=`evaluate "${channel}"`
[[ ${text} != "null" ]] && text=`evaluate "${text}"`
[[ ${attachments} != "null" ]] && attachments=`evaluate "${attachments}"`

cert_count="$(echo $raw_ca_certs | jq -r '. | length')"
if [[ ${cert_count} -gt 0 ]]; then
  cert_dir="/usr/local/share/ca-certificates/"
  mkdir -p "$cert_dir"
  for i in $(seq 0 $(expr "$cert_count" - 1)); do
    echo $raw_ca_certs | jq -r .[$i].cert >> "${cert_dir}/ca-cert-$(echo $raw_ca_certs | jq -r .[$i].domain).crt"
  done
  update-ca-certificates
fi

curl_options=""
if [[ "${allow_insecure}" == "true" ]]; then
    curl_options="${curl_options} -k"
fi

body=$(jq -c -n \
    --arg username "${username}" \
    --argjson icon_url "${icon_url}" \
    --argjson icon_emoji "${icon_emoji}" \
    --arg channel "${channel}" \
    --argjson text "${text}" \
    --argjson attachments "${attachments}" \
    '{
        username: $username,
        icon_url: $icon_url,
        icon_emoji: $icon_emoji,
        channel: $channel,
        text: $text,
        attachments: $attachments
    }'
)

curl --fail -XPOST --data-urlencode "payload=${body}" ${curl_options} ${webhook_url}

jq -n \
    --arg ts $(date +%s) \
    --arg username "${username}" \
    --argjson icon_url "${icon_url}" \
    --argjson icon_emoji "${icon_emoji}" \
    --arg channel "${channel}" \
    --argjson text "${text}" \
    --argjson attachments "${attachments}" \
    '{
        version: {
            timestamp: $ts
        },
        metadata: [
            {name: "username", value: $username},
            {name: "icon_url", value: $icon_url | tostring},
            {name: "icon_emoji", value: $icon_emoji | tostring},
            {name: "channel", value: $channel},
            {name: "text", value: $text},
            {name: "attachments", value: $attachments | tojson}
        ]
    }' >&3

